{
    "id": 1,
    "name": "Design Patterns Quiz 5",
    "description": "Design Patterns Quiz 5",
    "questions": [
        {
            "id": 1010,
            "name": "Which of the following pattern refers to creating duplicate object while keeping performance in mind?",
			"explanation": "no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1055,
                    "questionId": 1010,
                    "name": "Builder Pattern ",
                    "isAnswer": false
                },
                {
                    "id": 1056,
                    "questionId": 1010,
                    "name": " Bridge Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1057,
                    "questionId": 1010,
                    "name": " Prototype Pattern",
                    "isAnswer":true
                },
                {
                    "id": 1058,
                    "questionId": 1010,
                    "name": " Filter Pattern ",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        },
        {
            "id": 1011,
            "name": " Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. It lets subclasses redefine certain steps of an algorithm without changing the algorithm structure.",
			"explanation": "no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1059,
                    "questionId": 1010,
                    "name": " Chain of responsibility ",
                    "isAnswer": false
                },
                {
                    "id": 1060,
                    "questionId": 1010,
                    "name": " Template method ",
                    "isAnswer": true
                },
                {
                    "id": 1061,
                    "questionId": 1010,
                    "name": " Interpretor ",
                    "isAnswer": false
                },
                {
                    "id": 1062,
                    "questionId": 1010,
                    "name": " Prototype",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        },
        {
            "id": 1012,
            "name": " Which design pattern provides a single class which provides simplified methods required by client and delagates call to those methods?",
			"explanation": "no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1063,
                    "questionId": 1010,
                    "name": "Adapter pattern",
                    "isAnswer": false
                },
                {
                    "id": 1064,
                    "questionId": 1010,
                    "name": "Builder pattern",
                    "isAnswer": false
                },
                {
                    "id": 1065,
                    "questionId": 1010,
                    "name": " Facade pattern",
                    "isAnswer": true
                },
                {
                    "id": 1066,
                    "questionId": 1010,
                    "name": "Prototype pattern",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        },
		{
			"id": 1013,
            "name": "  In which of the following pattern, a visitor class is used which changes the executing algorithm of an element class?",
			"explanation": "no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1067,
                    "questionId": 1010,
                    "name": "Visitor Pattern",
                    "isAnswer": true
                },
                {
                    "id": 1068,
                    "questionId": 1010,
                    "name": "MVC Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1069,
                    "questionId": 1010,
                    "name": " Business Delegate Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1070,
                    "questionId": 1010,
                    "name": "Composite Entity Pattern ",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1014,
            "name": "Which of the following Chooses and standardizes patterns for a problem domain promotes software reuse and, hence, quality and productivity?",
			"explanation": "no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1071,
                    "questionId": 1010,
                    "name": " Promoting Communication",
                    "isAnswer": false
                },
                {
                    "id": 1072,
                    "questionId": 1010,
                    "name": "Streamlining Documentation",
                    "isAnswer": false
                },
                {
                    "id": 1073,
                    "questionId": 1010,
                    "name": "Increasing Development Efficiency",
                    "isAnswer": false
                },
                {
                    "id": 1074,
                    "questionId": 1010,
                    "name": "Supporting Software Reuse ",
                    "isAnswer": true
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1015,
            "name": " Attach additional responsibilities to an object dynamically.It provides a flexible alternative to subclassing for extending functionality",
			"explanation": " no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1075,
                    "questionId": 1010,
                    "name": " Chain of responsibility ",
                    "isAnswer": false
                },
                {
                    "id": 1076,
                    "questionId": 1010,
                    "name": "Adapter",
                    "isAnswer": false
                },
                {
                    "id": 1077,
                    "questionId": 1010,
                    "name": "Decorator",
                    "isAnswer": true
                },
                {
                    "id": 1078,
                    "questionId": 1010,
                    "name": "Composite",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1016,
            "name": "A pattern language",
			"explanation": "no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1079,
                    "questionId": 1010,
                    "name": "encompasses a collection of patterns",
                    "isAnswer": true
                },
                {
                    "id": 1080,
                    "questionId": 1010,
                    "name": " is implemented using hypertext",
                    "isAnswer": false
                },
                {
                    "id": 1081,
                    "questionId": 1010,
                    "name": "resembles the structure of natural languages",
                    "isAnswer": false
                },
                {
                    "id": 1082,
                    "questionId": 1010,
                    "name": "None of the above",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1017,
            "name": " Which design pattern suggest multiple classes through which request is passed and multiple but only relevant classes carry out operations on the request?",
			"explanation": "no explanation ",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1083,
                    "questionId": 1010,
                    "name": " Singleton pattern",
                    "isAnswer": false
                },
                {
                    "id": 1084,
                    "questionId": 1010,
                    "name": "Chain of responsibility pattern ",
                    "isAnswer": true
                },
                {
                    "id": 1085,
                    "questionId": 1010,
                    "name": "State pattern",
                    "isAnswer": false
                },
                {
                    "id": 1086,
                    "questionId": 1010,
                    "name": "Bridge pattern",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1018,
            "name": "   Most user interface design patterns fall with in one of ____ categories of patterns",
			"explanation": " no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1087,
                    "questionId": 1010,
                    "name": "5",
                    "isAnswer": false
                },
                {
                    "id": 1088,
                    "questionId": 1010,
                    "name": "10",
                    "isAnswer": true
                },
                {
                    "id": 1089,
                    "questionId": 1010,
                    "name": "25",
                    "isAnswer": false
                },
                {
                    "id": 1090,
                    "questionId": 1010,
                    "name": "100 ",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1019,
            "name": " Which of the following are levels of design focus that can be used to categorize WebApp patterns? ",
			"explanation": "no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1091,
                    "questionId": 1010,
                    "name": "Behavioral patterns ",
                    "isAnswer": false
                },
                {
                    "id": 1092,
                    "questionId": 1010,
                    "name": "Functional patterns ",
                    "isAnswer": false
                },
                {
                    "id": 1093,
                    "questionId": 1010,
                    "name": "Layout patterns",
                    "isAnswer": false
                },
                {
                    "id": 1094,
                    "questionId": 1010,
                    "name": "Navigation patterns ",
                    "isAnswer": false
                },
                {
                    "id": 1094,
                    "questionId": 1010,
                    "name": "Both b and d ",
                    "isAnswer": true
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		}
    ]
}