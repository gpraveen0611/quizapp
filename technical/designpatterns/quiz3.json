{
    "id": 1,
    "name": "Design Patterns Quiz 3",
    "description": "Design Patterns Quiz 3",
    "questions": [
        {
            "id": 1010,
            "name": "In which of the following pattern, a visitor class is used which changes the executing algorithm of an element class?",
			"explanation": "In Visitor pattern, a visitor class is used which changes the executing algorithm of an element class",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1055,
                    "questionId": 1010,
                    "name": "Visitor Pattern ",
                    "isAnswer": true
                },
                {
                    "id": 1056,
                    "questionId": 1010,
                    "name": "  MVC Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1057,
                    "questionId": 1010,
                    "name": " Business Delegate Pattern",
                    "isAnswer":false
                },
                {
                    "id": 1058,
                    "questionId": 1010,
                    "name": " Composite Entity Pattern ",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        },
        {
            "id": 1011,
            "name": " Which of the following pattern is used to restore state of an object to a previous state?",
			"explanation": "Memento pattern is used to restore state of an object to a previous state",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1059,
                    "questionId": 1010,
                    "name": " Iterator Pattern ",
                    "isAnswer": false
                },
                {
                    "id": 1060,
                    "questionId": 1010,
                    "name": " Mediator Pattern  ",
                    "isAnswer": false
                },
                {
                    "id": 1061,
                    "questionId": 1010,
                    "name": " Memento Pattern",
                    "isAnswer": true
                },
                {
                    "id": 1062,
                    "questionId": 1010,
                    "name": "  Observer Pattern",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        },
        {
            "id": 1012,
            "name": "  Which of the following describes the Mediator pattern correctly?",
			"explanation": "This pattern is used to reduce communication complexity between multiple objects or classes",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1063,
                    "questionId": 1010,
                    "name": "This pattern is used to get a way to access the elements of a collection object in sequential manner without any need to know its underlying representation.",
                    "isAnswer": false
                },
                {
                    "id": 1064,
                    "questionId": 1010,
                    "name": "This pattern is used to reduce communication complexity between multiple objects or classes.",
                    "isAnswer": true
                },
                {
                    "id": 1065,
                    "questionId": 1010,
                    "name": " This pattern is used to reduce communication complexity between multiple objects or classes.",
                    "isAnswer": false
                },
                {
                    "id": 1066,
                    "questionId": 1010,
                    "name": "This pattern is used when there is one-to-many relationship between objects such as if one object is modified, its depenedent objects are to be notified automatically",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        },
		{
			"id": 1013,
            "name": " Which of the following describes the Prototype pattern correctly?",
			"explanation": "Prototype pattern refers to creating duplicate object while keeping performance in mind",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1067,
                    "questionId": 1010,
                    "name": "This pattern builds a complex object using simple objects and using a step by step approach.",
                    "isAnswer": false
                },
                {
                    "id": 1068,
                    "questionId": 1010,
                    "name": "This pattern refers to creating duplicate object while keeping performance in mind.",
                    "isAnswer": true
                },
                {
                    "id": 1069,
                    "questionId": 1010,
                    "name": "This pattern works as a bridge between two incompatible interfaces.",
                    "isAnswer": false
                },
                {
                    "id": 1070,
                    "questionId": 1010,
                    "name": "This pattern is used when we need to decouple an abstraction from its implementation so that the two can vary independently ",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1014,
            "name": "Which of the following pattern a request is wrapped under an object as command and passed to invoker object?",
			"explanation": "no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1071,
                    "questionId": 1010,
                    "name": "Proxy Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1072,
                    "questionId": 1010,
                    "name": "Chain of Responsibility Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1073,
                    "questionId": 1010,
                    "name": "Command Pattern",
                    "isAnswer": true
                },
                {
                    "id": 1074,
                    "questionId": 1010,
                    "name": "Interpreter Pattern ",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1015,
            "name": "  Which of the following describes the Filter pattern correctly?",
			"explanation": " no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1075,
                    "questionId": 1010,
                    "name": " This pattern builds a complex object using simple objects and using a step by step approach ",
                    "isAnswer": false
                },
                {
                    "id": 1076,
                    "questionId": 1010,
                    "name": "This pattern refers to creating duplicate object while keeping performance in mind",
                    "isAnswer": true
                },
                {
                    "id": 1077,
                    "questionId": 1010,
                    "name": "This pattern enables developers to filter a set of objects using different criteria and chaining them in a decoupled way through logical operations",
                    "isAnswer": false
                },
                {
                    "id": 1078,
                    "questionId": 1010,
                    "name": "This pattern is used when we need to decouple an abstraction from its implementation so that the two can vary independently",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1016,
            "name": "In which of the following pattern an interface is responsible for creating a factory of related objects without explicitly specifying their classes?",
			"explanation": "In Abstract Factory Pattern an interface is responsible for creating a factory of related objects without explicitly specifying their classes",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1079,
                    "questionId": 1010,
                    "name": "Factory Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1080,
                    "questionId": 1010,
                    "name": "Abstract Factory Pattern",
                    "isAnswer": true
                },
                {
                    "id": 1081,
                    "questionId": 1010,
                    "name": "Singleton Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1082,
                    "questionId": 1010,
                    "name": "Transfer Object Pattern",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1017,
            "name": "  Which of the following describes the Singleton pattern correctly?",
			"explanation": "Singleton involves a single class which is responsible to create an object while making sure that only single object gets created",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1083,
                    "questionId": 1010,
                    "name": " This pattern creates object without exposing the creation logic to the client and refer to newly created object using a common interface",
                    "isAnswer": false
                },
                {
                    "id": 1084,
                    "questionId": 1010,
                    "name": "In this pattern an interface is responsible for creating a factory of related objects without explicitly specifying their classes ",
                    "isAnswer": false
                },
                {
                    "id": 1085,
                    "questionId": 1010,
                    "name": "This pattern involves a single class which is responsible to create an object while making sure that only single object gets created",
                    "isAnswer": true
                },
                {
                    "id": 1086,
                    "questionId": 1010,
                    "name": "This pattern is used when we want to pass data with multiple attributes in one shot from client to server",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1018,
            "name": "  Which of the following describes the Facade pattern correctly?",
			"explanation": " Facade pattern hides the complexities of the system and provides an interface to the client using which the client can access the system",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1087,
                    "questionId": 1010,
                    "name": "This pattern allows a user to add new functionality to an existing object without altering its structure",
                    "isAnswer": false
                },
                {
                    "id": 1088,
                    "questionId": 1010,
                    "name": "This pattern is used where we need to treat a group of objects in similar way as a single object",
                    "isAnswer": false
                },
                {
                    "id": 1089,
                    "questionId": 1010,
                    "name": "This pattern hides the complexities of the system and provides an interface to the client using which the client can access the system",
                    "isAnswer": true
                },
                {
                    "id": 1090,
                    "questionId": 1010,
                    "name": "This pattern is primarily used to reduce the number of objects created and to decrease memory footprint and increase performance",
                    "isAnswer":false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1019,
            "name": " Which of the following is the correct list of entities of Transfer Object pattern? ",
			"explanation": "no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1091,
                    "questionId": 1010,
                    "name": " Business Object , Transfer Object, Client ",
                    "isAnswer": true
                },
                {
                    "id": 1092,
                    "questionId": 1010,
                    "name": " Service, Context, Service Locator, Cache, Client ",
                    "isAnswer": false
                },
                {
                    "id": 1093,
                    "questionId": 1010,
                    "name": "Business Object , Client",
                    "isAnswer": false
                },
                {
                    "id": 1094,
                    "questionId": 1010,
                    "name": "Service, Service Locator, Client ",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		}
    ]
}