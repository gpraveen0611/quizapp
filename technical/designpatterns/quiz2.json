{
    "id": 1,
    "name": "Design Patterns Quiz 2",
    "description": "Design Patterns Quiz 2",
    "questions": [
        {
            "id": 1010,
            "name": "Which of the following is correct about Abstract Factory design pattern.",
			"explanation": "no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1055,
                    "questionId": 1010,
                    "name": "This type of design pattern comes under creational pattern ",
                    "isAnswer": false
                },
                {
                    "id": 1056,
                    "questionId": 1010,
                    "name": " Abstract Factory patterns work around a super-factory which creates other factories.",
                    "isAnswer": false
                },
                {
                    "id": 1057,
                    "questionId": 1010,
                    "name": " In Abstract Factory pattern an interface is responsible for creating a factory of related objects without explicitly specifying their classes.",
                    "isAnswer":false
                },
                {
                    "id": 1058,
                    "questionId": 1010,
                    "name": " All of the above ",
                    "isAnswer": true
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        },
        {
            "id": 1011,
            "name": " Which of the following describes the Prototype pattern correctly?",
			"explanation": "Prototype pattern refers to creating duplicate object while keeping performance in mind.",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1059,
                    "questionId": 1010,
                    "name": " This pattern builds a complex object using simple objects and using a step by step approach. ",
                    "isAnswer": false
                },
                {
                    "id": 1060,
                    "questionId": 1010,
                    "name": " This pattern refers to creating duplicate object while keeping performance in mind.  ",
                    "isAnswer": true
                },
                {
                    "id": 1061,
                    "questionId": 1010,
                    "name": " This pattern works as a bridge between two incompatible interfaces ",
                    "isAnswer": false
                },
                {
                    "id": 1062,
                    "questionId": 1010,
                    "name": " This pattern is used when we need to decouple an abstraction from its implementation so that the two can vary independently",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        },
        {
            "id": 1012,
            "name": " Which of the following pattern builds a complex object using simple objects and using a step by step approach?",
			"explanation": "Builder Pattern builds a complex object using simple objects and using a step by step approach. This builder is independent of other objects",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1063,
                    "questionId": 1010,
                    "name": " Builder Pattern",
                    "isAnswer": true
                },
                {
                    "id": 1064,
                    "questionId": 1010,
                    "name": "Bridge Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1065,
                    "questionId": 1010,
                    "name": " Adapter Pattern ",
                    "isAnswer": false
                },
                {
                    "id": 1066,
                    "questionId": 1010,
                    "name": "Filter Pattern",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        },
		{
			"id": 1013,
            "name": " Which of the following describes the Proxy pattern correctly?",
			"explanation": "no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1067,
                    "questionId": 1010,
                    "name": "In this pattern a class represents functionality of another class",
                    "isAnswer": true
                },
                {
                    "id": 1068,
                    "questionId": 1010,
                    "name": "This pattern creates a chain of receiver objects for a request",
                    "isAnswer": false
                },
                {
                    "id": 1069,
                    "questionId": 1010,
                    "name": "This pattern provides a way to evaluate language grammar or expression",
                    "isAnswer": false
                },
                {
                    "id": 1070,
                    "questionId": 1010,
                    "name": "In this pattern a request is wrapped under an object as command and passed to invoker object ",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1014,
            "name": "Which of the following pattern is used to restore state of an object to a previous state?",
			"explanation": "Memento pattern is used to restore state of an object to a previous state.",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1071,
                    "questionId": 1010,
                    "name": " Iterator Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1072,
                    "questionId": 1010,
                    "name": "Mediator Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1073,
                    "questionId": 1010,
                    "name": "Memento Pattern",
                    "isAnswer": true
                },
                {
                    "id": 1074,
                    "questionId": 1010,
                    "name": "Observer Pattern ",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1015,
            "name": "  In which of the following pattern, a class behavior changes based on its state?",
			"explanation": " In State pattern, a class behavior changes based on its state.",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1075,
                    "questionId": 1010,
                    "name": " State Pattern ",
                    "isAnswer": true
                },
                {
                    "id": 1076,
                    "questionId": 1010,
                    "name": "Null Object Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1077,
                    "questionId": 1010,
                    "name": "Strategy Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1078,
                    "questionId": 1010,
                    "name": " Template Pattern",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1016,
            "name": "Which of the following pattern is used to to decouple presentation tier and business tier?",
			"explanation": "Business Delegate pattern is used to decouple presentation tier and business tier",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1079,
                    "questionId": 1010,
                    "name": "Visitor Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1080,
                    "questionId": 1010,
                    "name": "MVC Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1081,
                    "questionId": 1010,
                    "name": "Business Delegate Pattern",
                    "isAnswer": true
                },
                {
                    "id": 1082,
                    "questionId": 1010,
                    "name": "Composite Entity Pattern",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1017,
            "name": " In which of the following pattern an interface is responsible for creating a factory of related objects without explicitly specifying their classes?",
			"explanation": "In Abstract Factory Pattern an interface is responsible for creating a factory of related objects without explicitly specifying their classes ",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1083,
                    "questionId": 1010,
                    "name": "  Factory Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1084,
                    "questionId": 1010,
                    "name": "Abstract Factory Pattern ",
                    "isAnswer": true
                },
                {
                    "id": 1085,
                    "questionId": 1010,
                    "name": "Singleton Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1086,
                    "questionId": 1010,
                    "name": "Transfer Object Pattern",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1018,
            "name": "  Which type of design patterns are specifically concerned with the presentation tier?",
			"explanation": " J2EE Design Patterns are specifically concerned with the presentation tier.",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1087,
                    "questionId": 1010,
                    "name": "Creational Design Patterns",
                    "isAnswer": false
                },
                {
                    "id": 1088,
                    "questionId": 1010,
                    "name": "Structural Design Patterns",
                    "isAnswer": false
                },
                {
                    "id": 1089,
                    "questionId": 1010,
                    "name": "Behavioral Design Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1090,
                    "questionId": 1010,
                    "name": "J2EE Design Patterns ",
                    "isAnswer": true
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1019,
            "name": " Which of the following is the correct list of entities of Business Delegate pattern? ",
			"explanation": "Client, Business Delegate, LookUp Service, Business Service are the entities of Business Delegate Pattern",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1091,
                    "questionId": 1010,
                    "name": "Business Delegate, LookUp Service, Business Service ",
                    "isAnswer": false
                },
                {
                    "id": 1092,
                    "questionId": 1010,
                    "name": "Client, Business Delegate, LookUp Service, Business Service ",
                    "isAnswer": true
                },
                {
                    "id": 1093,
                    "questionId": 1010,
                    "name": "Client, LookUp Service, Business Service",
                    "isAnswer": false
                },
                {
                    "id": 1094,
                    "questionId": 1010,
                    "name": "Client, Business Delegate, Business Service ",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		}
    ]
}