{
    "id": 1,
    "name": "Design Patterns Quiz 4",
    "description": "Design Patterns Quiz 4",
    "questions": [
        {
            "id": 1010,
            "name": "Which of the following describes the J2EE pattern correctly?",
			"explanation": "J2EE Design Patterns are specifically concerned with the presentation tier ",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1055,
                    "questionId": 1010,
                    "name": "This type of patterns provide a way to create objects while hiding the creation logic, rather than instantiating objects directly using new opreator ",
                    "isAnswer": false
                },
                {
                    "id": 1056,
                    "questionId": 1010,
                    "name": " This type of patterns concern class and object composition. Concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionalities",
                    "isAnswer": false
                },
                {
                    "id": 1057,
                    "questionId": 1010,
                    "name": " This type of pattern are specifically concerned with communication between objects",
                    "isAnswer":false
                },
                {
                    "id": 1058,
                    "questionId": 1010,
                    "name": " This type of pattern are specifically concerned with the presentation tier ",
                    "isAnswer": true
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        },
        {
            "id": 1011,
            "name": " Which of the following pattern is used to get a way to access the elements of a collection object in sequential manner without any need to know its underlying representation?",
			"explanation": "Iterator pattern is used to get a way to access the elements of a collection object in sequential manner without any need to know its underlying representation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1059,
                    "questionId": 1010,
                    "name": " Iterator Pattern ",
                    "isAnswer": true
                },
                {
                    "id": 1060,
                    "questionId": 1010,
                    "name": " Mediator Pattern ",
                    "isAnswer": false
                },
                {
                    "id": 1061,
                    "questionId": 1010,
                    "name": " Memento Pattern ",
                    "isAnswer": false
                },
                {
                    "id": 1062,
                    "questionId": 1010,
                    "name": " Observer Pattern",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        },
        {
            "id": 1012,
            "name": " Which of the following describes the Bridge pattern correctly?",
			"explanation": "Bridge pattern is used when we need to decouple an abstraction from its implementation so that the two can vary independently",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1063,
                    "questionId": 1010,
                    "name": "This pattern builds a complex object using simple objects and using a step by step approach",
                    "isAnswer": false
                },
                {
                    "id": 1064,
                    "questionId": 1010,
                    "name": "This pattern refers to creating duplicate object while keeping performance in mind",
                    "isAnswer": false
                },
                {
                    "id": 1065,
                    "questionId": 1010,
                    "name": "  This pattern is used when creation of object directly is costly",
                    "isAnswer": false
                },
                {
                    "id": 1066,
                    "questionId": 1010,
                    "name": "This pattern is used when we need to decouple an abstraction from its implementation so that the two can vary independently",
                    "isAnswer": true
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
        },
		{
			"id": 1013,
            "name": "  Which of the following describes the Builder pattern correctly?",
			"explanation": "Builder pattern builds a complex object using simple objects and using a step by step approach. This builder is independent of other objects",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1067,
                    "questionId": 1010,
                    "name": "This pattern builds a complex object using simple objects and using a step by step approach.",
                    "isAnswer": true
                },
                {
                    "id": 1068,
                    "questionId": 1010,
                    "name": "This pattern refers to creating duplicate object while keeping performance in mind.",
                    "isAnswer": false
                },
                {
                    "id": 1069,
                    "questionId": 1010,
                    "name": "This pattern is used when creation of object directly is costly",
                    "isAnswer": false
                },
                {
                    "id": 1070,
                    "questionId": 1010,
                    "name": "This pattern is used when we need to decouple an abstraction from its implementation so that the two can vary independently ",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1014,
            "name": " Which of the following describes the Command pattern correctly?",
			"explanation": "no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1071,
                    "questionId": 1010,
                    "name": "In this pattern a class represents functionality of another class",
                    "isAnswer": false
                },
                {
                    "id": 1072,
                    "questionId": 1010,
                    "name": "This pattern creates a chain of receiver objects for a request",
                    "isAnswer": false
                },
                {
                    "id": 1073,
                    "questionId": 1010,
                    "name": "This pattern provides a way to evaluate language grammar or expression",
                    "isAnswer": false
                },
                {
                    "id": 1074,
                    "questionId": 1010,
                    "name": "In this pattern a request is wrapped under an object as command and passed to invoker object ",
                    "isAnswer": true
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1015,
            "name": "  In which of the following pattern, a null object replaces check of NULL object instance?",
			"explanation": " In Null Object pattern, a null object replaces check of NULL object instance",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1075,
                    "questionId": 1010,
                    "name": "  State Pattern ",
                    "isAnswer": false
                },
                {
                    "id": 1076,
                    "questionId": 1010,
                    "name": "Null Object Pattern",
                    "isAnswer": true
                },
                {
                    "id": 1077,
                    "questionId": 1010,
                    "name": "Strategy Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1078,
                    "questionId": 1010,
                    "name": " Template Pattern",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1016,
            "name": "Which of the following describes the Strategy pattern correctly?",
			"explanation": "no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1079,
                    "questionId": 1010,
                    "name": " In this pattern, a class behavior changes based on its state.",
                    "isAnswer": false
                },
                {
                    "id": 1080,
                    "questionId": 1010,
                    "name": "In this pattern, a null object replaces check of NULL object instance",
                    "isAnswer": false
                },
                {
                    "id": 1081,
                    "questionId": 1010,
                    "name": " In this pattern, a class behavior or its algorithm can be changed at run time",
                    "isAnswer": true
                },
                {
                    "id": 1082,
                    "questionId": 1010,
                    "name": " In this pattern, an abstract class exposes defined way(s)/template(s) to execute its methods",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1017,
            "name": " Which of the following is the correct list of entities of Business Delegate pattern?",
			"explanation": "Client, Business Delegate, LookUp Service, Business Service are the entities of Business Delegate Pattern ",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1083,
                    "questionId": 1010,
                    "name": " Business Delegate, LookUp Service, Business Service",
                    "isAnswer": false
                },
                {
                    "id": 1084,
                    "questionId": 1010,
                    "name": "Client, Business Delegate, LookUp Service, Business Service",
                    "isAnswer": true
                },
                {
                    "id": 1085,
                    "questionId": 1010,
                    "name": "Client, LookUp Service, Business Service",
                    "isAnswer": false
                },
                {
                    "id": 1086,
                    "questionId": 1010,
                    "name": "Client, Business Delegate, Business Service",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1018,
            "name": "  In which of the following pattern an interface is responsible for creating a factory of related objects without explicitly specifying their classes?",
			"explanation": " no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1087,
                    "questionId": 1010,
                    "name": "Factory Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1088,
                    "questionId": 1010,
                    "name": "Abstract Factory Pattern",
                    "isAnswer": true
                },
                {
                    "id": 1089,
                    "questionId": 1010,
                    "name": "Singleton Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1090,
                    "questionId": 1010,
                    "name": "Transfer Object Pattern ",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		},
		{
			"id": 1019,
            "name": " Which of the following pattern a request is wrapped under an object as command and passed to invoker object? ",
			"explanation": "no explanation",
            "questionTypeId": 1,
            "options": [
                {
                    "id": 1091,
                    "questionId": 1010,
                    "name": "Proxy Pattern",
                    "isAnswer": false
                },
                {
                    "id": 1092,
                    "questionId": 1010,
                    "name": "Chain of Responsibility Pattern ",
                    "isAnswer": false
                },
                {
                    "id": 1093,
                    "questionId": 1010,
                    "name": "Command Pattern ",
                    "isAnswer": true
                },
                {
                    "id": 1094,
                    "questionId": 1010,
                    "name": "Interpreter Pattern ",
                    "isAnswer": false
                }
            ],
            "questionType": {
                "id": 1,
                "name": "Multiple Choice",
                "isActive": true
            }
		}
    ]
}